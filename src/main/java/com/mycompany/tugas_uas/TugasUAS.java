/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tugas_uas;

import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author NoobMaster
 */
public class TugasUAS extends javax.swing.JFrame {

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(TugasUAS.class.getName());

    static Connection koneksi;
    DefaultTableModel model;
    private String selectedId = null;
    private Statement stmt = null;
    private ResultSet rs = null;

//    private javax.swing.JPanel panelJenisKelamin;
//    private javax.swing.ButtonGroup buttonGroupJenisKelamin;
    /**
     * Creates new form TugasUAS
     */
    public TugasUAS() {
        initComponents();
        panelJenisKelamin.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));
        this.setTitle("Tugas UAS - ALFIAN MUHAMMAD ARDIANTO - 241110013");
        koneksi = connect_db();
        loadAgamaComboBox();
        loadPekerjaanComboBox();
        loadJenisKelaminRadioButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                closeResources();
            }
        });

        model = (DefaultTableModel) tblPasien.getModel();
        tblPasien.setModel(model);
        tampilkanDataKeTabel();
        btnBatalUbah.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void loadAgamaComboBox() {
        cbAgamaId.removeAllItems();
        cbAgamaId.addItem("- Pilih -");
        try {
            stmt = koneksi.createStatement();
            rs = stmt.executeQuery("SELECT agama_id, agama_nm FROM mst_agama");
            while (rs.next()) {
                cbAgamaId.addItem(rs.getString("agama_nm"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal load data agama: " + e.getMessage());
        }
    }

    private void loadPekerjaanComboBox() {
        cbPekerjaanId.removeAllItems();
        cbPekerjaanId.addItem("- Pilih -");
        try {
            stmt = koneksi.createStatement();
            rs = stmt.executeQuery("SELECT pekerjaan_id, pekerjaan_nm FROM mst_pekerjaan");
            while (rs.next()) {
                cbPekerjaanId.addItem(rs.getString("pekerjaan_nm"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal load data pekerjaan: " + e.getMessage());
        }
    }

    private void loadJenisKelaminRadioButton() {
        panelJenisKelamin.removeAll();
        buttonGroupJenisKelamin = new javax.swing.ButtonGroup();
        try {
            stmt = koneksi.createStatement();
            rs = stmt.executeQuery("SELECT jeniskelamin_id, jeniskelamin_nm FROM mst_jenis_kelamin");
            while (rs.next()) {
                String jenisNm = rs.getString("jeniskelamin_nm");
                String jenisId = rs.getString("jeniskelamin_id"); // ambil id
                javax.swing.JRadioButton rb = new javax.swing.JRadioButton(jenisNm);
                rb.setActionCommand(jenisId); // simpan id, bukan nama!
                buttonGroupJenisKelamin.add(rb);
                panelJenisKelamin.add(rb);
            }
            panelJenisKelamin.revalidate();
            panelJenisKelamin.repaint();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal load data jenis kelamin: " + e.getMessage());
        }

        System.out.println("Jumlah radio button di panel: " + panelJenisKelamin.getComponentCount());
    }

    private void closeResources() {
        try {
            if (rs != null && !rs.isClosed()) {
                rs.close();
            }
            if (stmt != null && !stmt.isClosed()) {
                stmt.close();
            }
            if (koneksi != null && !koneksi.isClosed()) {
                koneksi.close();
            }
        } catch (SQLException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupJenisKelamin = new javax.swing.ButtonGroup();
        lblPasienNm = new javax.swing.JLabel();
        tfPasienNm = new javax.swing.JTextField();
        lblNIK = new javax.swing.JLabel();
        tfNIK = new javax.swing.JTextField();
        lblLahirTgl = new javax.swing.JLabel();
        tfLahirTgl = new com.toedter.calendar.JDateChooser();
        lblJenisKelaminId = new javax.swing.JLabel();
        lblAlamat = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAlamat = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        txtNoTelp = new javax.swing.JTextField();
        lblAgama = new javax.swing.JLabel();
        cbAgamaId = new javax.swing.JComboBox<>();
        lblPekerjaan = new javax.swing.JLabel();
        cbPekerjaanId = new javax.swing.JComboBox<>();
        btnSimpan = new javax.swing.JButton();
        btnUbah = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnBatalUbah = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPasien = new javax.swing.JTable();
        panelJenisKelamin = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblPasienNm.setText("Nama Pasien");

        tfPasienNm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfPasienNmActionPerformed(evt);
            }
        });

        lblNIK.setText("NIK");

        lblLahirTgl.setText("Tanggal Lahir");

        lblJenisKelaminId.setText("Jenis Kelamin");

        lblAlamat.setText("Alamat");

        txtAlamat.setColumns(20);
        txtAlamat.setRows(5);
        jScrollPane1.setViewportView(txtAlamat);

        jLabel1.setText("No Telpon");

        lblAgama.setText("Agama");

        cbAgamaId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblPekerjaan.setText("Pekerjaan");

        cbPekerjaanId.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSimpan.setText("Simpan");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnUbah.setText("Ubah");
        btnUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUbahActionPerformed(evt);
            }
        });

        btnHapus.setText("Hapus");
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnBatalUbah.setText("Batal Ubah");
        btnBatalUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBatalUbahActionPerformed(evt);
            }
        });

        tblPasien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No RM", "Nama Pasien", "NIK", "Tgl Lahir", "Jenis Kelamin", "Alamat", "No Telpon", "Agama", "Pekerjaan", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblPasien);

        panelJenisKelamin.setPreferredSize(new java.awt.Dimension(200, 50));

        javax.swing.GroupLayout panelJenisKelaminLayout = new javax.swing.GroupLayout(panelJenisKelamin);
        panelJenisKelamin.setLayout(panelJenisKelaminLayout);
        panelJenisKelaminLayout.setHorizontalGroup(
            panelJenisKelaminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelJenisKelaminLayout.setVerticalGroup(
            panelJenisKelaminLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 22, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1168, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblNIK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblPasienNm, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                            .addComponent(lblLahirTgl)
                            .addComponent(lblJenisKelaminId)
                            .addComponent(lblAlamat)
                            .addComponent(jLabel1)
                            .addComponent(lblAgama)
                            .addComponent(lblPekerjaan))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfLahirTgl, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSimpan)
                                .addGap(18, 18, 18)
                                .addComponent(btnUbah)
                                .addGap(18, 18, 18)
                                .addComponent(btnHapus)
                                .addGap(18, 18, 18)
                                .addComponent(btnBatalUbah))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(cbPekerjaanId, javax.swing.GroupLayout.Alignment.LEADING, 0, 181, Short.MAX_VALUE)
                                .addComponent(cbAgamaId, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtNoTelp, javax.swing.GroupLayout.Alignment.LEADING))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(panelJenisKelamin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE)
                                    .addComponent(tfPasienNm, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tfNIK, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))))))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPasienNm)
                    .addComponent(tfPasienNm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNIK)
                    .addComponent(tfNIK, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLahirTgl)
                    .addComponent(tfLahirTgl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblJenisKelaminId)
                    .addComponent(panelJenisKelamin, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblAlamat)
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNoTelp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAgama)
                    .addComponent(cbAgamaId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPekerjaan)
                    .addComponent(cbPekerjaanId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSimpan)
                    .addComponent(btnUbah)
                    .addComponent(btnHapus)
                    .addComponent(btnBatalUbah))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfPasienNmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfPasienNmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfPasienNmActionPerformed

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // TODO add your handling code here:
        if (selectedId != null) {
            // Update mode
            updateData();
        } else {
            // Save mode
            saveData();
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void saveData() {
        String pasien_nm = tfPasienNm.getText().trim();
        String nik = tfNIK.getText().trim();

        // Ambil tanggal dari JDateChooser
        java.util.Date tglLahir = tfLahirTgl.getDate();
        String lahir_tgl = "";
        if (tglLahir != null) {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
            lahir_tgl = sdf.format(tglLahir);
        }

        // Jenis Kelamin dari radio button
        String jeniskelamin_id = "";
        if (buttonGroupJenisKelamin.getSelection() != null) {
            jeniskelamin_id = buttonGroupJenisKelamin.getSelection().getActionCommand();
        }

        String alamat = txtAlamat.getText().trim();
        String no_telp = txtNoTelp.getText().trim();

        // Ambil id agama dari combo box
        int agama_id = 0;
        if (cbAgamaId.getSelectedIndex() > 0) { // index 0 adalah "- Pilih -"
            try {
                // Query id berdasarkan nama yang dipilih
                String agama_nm = (String) cbAgamaId.getSelectedItem();
                stmt = koneksi.createStatement();
                rs = stmt.executeQuery("SELECT agama_id FROM mst_agama WHERE agama_nm = '" + agama_nm + "'");
                if (rs.next()) {
                    agama_id = rs.getInt("agama_id");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Gagal ambil id agama: " + ex.getMessage());
                return;
            }
        }

        // Ambil id pekerjaan dari combo box
        int pekerjaan_id = 0;
        if (cbPekerjaanId.getSelectedIndex() > 0) {
            try {
                String pekerjaan_nm = (String) cbPekerjaanId.getSelectedItem();
               stmt = koneksi.createStatement();
                rs = stmt.executeQuery("SELECT pekerjaan_id FROM mst_pekerjaan WHERE pekerjaan_nm = '" + pekerjaan_nm + "'");
                if (rs.next()) {
                    pekerjaan_id = rs.getInt("pekerjaan_id");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Gagal ambil id pekerjaan: " + ex.getMessage());
                return;
            }
        }

        // Validasi Form
        if (pasien_nm.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama Pasien tidak boleh kosong!");
            return;
        }
        if (nik.isEmpty()) {
            JOptionPane.showMessageDialog(this, "NIK tidak boleh kosong!");
            return;
        }
        if (lahir_tgl.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal Lahir tidak boleh kosong!");
            return;
        }
        if (jeniskelamin_id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Jenis Kelamin tidak boleh kosong!");
            return;
        }
        if (alamat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Alamat tidak boleh kosong!");
            return;
        }
        if (no_telp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No Telpon tidak boleh kosong!");
            return;
        }
        if (agama_id == 0) {
            JOptionPane.showMessageDialog(this, "Agama belum dipilih!");
            return;
        }
        if (pekerjaan_id == 0) {
            JOptionPane.showMessageDialog(this, "Pekerjaan belum dipilih!");
            return;
        }

        // GENERATE rm_no otomatis 6 digit
        String rm_no = "";
        try {
            stmt = koneksi.createStatement();
            rs = stmt.executeQuery("SELECT MAX(rm_no) AS max_rm FROM dat_pasien");
            if (rs.next()) {
                String maxRm = rs.getString("max_rm");
                if (maxRm == null) {
                    rm_no = "000001";
                } else {
                    int nextNo = Integer.parseInt(maxRm) + 1;
                    rm_no = String.format("%06d", nextNo);
                }
            } else {
                rm_no = "000001";
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, "Gagal generate nomor rekam medis: " + ex.getMessage());
            return;
        }

        try {
            stmt = koneksi.createStatement();
            String query = "INSERT INTO dat_pasien (rm_no, pasien_nm, nik, lahir_tgl, jeniskelamin_id, alamat, no_telp, agama_id, pekerjaan_id) "
                + "VALUES ('" + rm_no + "', '" + pasien_nm + "', '" + nik + "', '" + lahir_tgl + "', '" + jeniskelamin_id + "', '" + alamat + "', '" + no_telp + "', " + agama_id + ", " + pekerjaan_id + ")";
            stmt.executeUpdate(query);
            JOptionPane.showMessageDialog(this, "Data berhasil disimpan");

            // Tampilkan ulang data di tabel
            tampilkanDataKeTabel();
            clearForm();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    """
                    Gagal menyimpan data!
                    Error: """ + e.getMessage() + "\n"
                    + "SQLState: " + e.getSQLState() + "\n"
                    + "Error Code: " + e.getErrorCode(),
                    "Error Database",
                    JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }
    }

    private void updateData() {
        String pasien_nm = tfPasienNm.getText().trim();
        String nik = tfNIK.getText().trim();

        // Ambil tanggal dari JDateChooser
        java.util.Date tglLahir = tfLahirTgl.getDate();
        String lahir_tgl = "";
        if (tglLahir != null) {
            java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
            lahir_tgl = sdf.format(tglLahir);
        }

        // Jenis Kelamin dari radio button
        String jeniskelamin_id = "";
        if (buttonGroupJenisKelamin.getSelection() != null) {
            jeniskelamin_id = buttonGroupJenisKelamin.getSelection().getActionCommand();
        }

        String alamat = txtAlamat.getText().trim();
        String no_telp = txtNoTelp.getText().trim();

        // Ambil id agama dari combo box
        int agama_id = 0;
        if (cbAgamaId.getSelectedIndex() > 0) { // index 0 adalah "- Pilih -"
            try {
                String agama_nm = (String) cbAgamaId.getSelectedItem();
                stmt = koneksi.createStatement();
                rs = stmt.executeQuery("SELECT agama_id FROM mst_agama WHERE agama_nm = '" + agama_nm + "'");
                if (rs.next()) {
                    agama_id = rs.getInt("agama_id");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Gagal ambil id agama: " + ex.getMessage());
                return;
            }
        }

        // Ambil id pekerjaan dari combo box
        int pekerjaan_id = 0;
        if (cbPekerjaanId.getSelectedIndex() > 0) {
            try {
                String pekerjaan_nm = (String) cbPekerjaanId.getSelectedItem();
                stmt = koneksi.createStatement();
                rs = stmt.executeQuery("SELECT pekerjaan_id FROM mst_pekerjaan WHERE pekerjaan_nm = '" + pekerjaan_nm + "'");
                if (rs.next()) {
                    pekerjaan_id = rs.getInt("pekerjaan_id");
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Gagal ambil id pekerjaan: " + ex.getMessage());
                return;
            }
        }

        // Validasi Form
        if (pasien_nm.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama Pasien tidak boleh kosong!");
            return;
        }
        if (nik.isEmpty()) {
            JOptionPane.showMessageDialog(this, "NIK tidak boleh kosong!");
            return;
        }
        if (lahir_tgl.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Tanggal Lahir tidak boleh kosong!");
            return;
        }
        if (jeniskelamin_id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Jenis Kelamin tidak boleh kosong!");
            return;
        }
        if (alamat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Alamat tidak boleh kosong!");
            return;
        }
        if (no_telp.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No Telpon tidak boleh kosong!");
            return;
        }
        if (agama_id == 0) {
            JOptionPane.showMessageDialog(this, "Agama belum dipilih!");
            return;
        }
        if (pekerjaan_id == 0) {
            JOptionPane.showMessageDialog(this, "Pekerjaan belum dipilih!");
            return;
        }
        if (selectedId == null) {
            JOptionPane.showMessageDialog(this, "Tidak ada data yang dipilih untuk diubah.");
            return;
        }

        try {
            stmt = koneksi.createStatement();
            String query = "UPDATE dat_pasien SET "
                    + "pasien_nm='" + pasien_nm + "', "
                    + "nik='" + nik + "', "
                    + "lahir_tgl='" + lahir_tgl + "', "
                    + "jeniskelamin_id='" + jeniskelamin_id + "', "
                    + "alamat='" + alamat + "', "
                    + "no_telp='" + no_telp + "', "
                    + "agama_id=" + agama_id + ", "
                    + "pekerjaan_id=" + pekerjaan_id
                    + " WHERE pasien_id='" + selectedId + "'";
            int result = stmt.executeUpdate(query);

            if (result > 0) {
                JOptionPane.showMessageDialog(this, "Data berhasil diperbarui");
                tampilkanDataKeTabel();
                clearForm();
                btnSimpan.setText("Simpan");
                btnBatalUbah.setVisible(false);
                selectedId = null;
            } else {
                JOptionPane.showMessageDialog(this, "Data gagal diperbarui");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this,
                    "Gagal memperbarui data!\n"
                    + "Error: " + e.getMessage() + "\n"
                    + "SQLState: " + e.getSQLState() + "\n"
                    + "Error Code: " + e.getErrorCode(),
                    "Error Database",
                    JOptionPane.ERROR_MESSAGE);

            e.printStackTrace();
        }
    }

    private void btnUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUbahActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPasien.getSelectedRow();

        if (selectedRow >= 0) {
            // Ambil data dari tabel
            String rm_no = (String) model.getValueAt(selectedRow, 0);
            String pasien_nm = (String) model.getValueAt(selectedRow, 1);
            String nik = (String) model.getValueAt(selectedRow, 2);
            String lahir_tgl = (String) model.getValueAt(selectedRow, 3);
            String jeniskelamin_id = (String) model.getValueAt(selectedRow, 4);
            String alamat = (String) model.getValueAt(selectedRow, 5);
            String no_telp = (String) model.getValueAt(selectedRow, 6);
            String agama_nm = (String) model.getValueAt(selectedRow, 7);
            String pekerjaan_nm = (String) model.getValueAt(selectedRow, 8);
            String pasien_id = (String) model.getValueAt(selectedRow, 9);

            // Isi form
            tfPasienNm.setText(pasien_nm);
            tfNIK.setText(nik);
            try {
                java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd");
                java.util.Date tgl = sdf.parse(lahir_tgl);
                tfLahirTgl.setDate(tgl);
            } catch (Exception ex) {
                tfLahirTgl.setDate(null);
            }

            // Set radio button jenis kelamin
            for (int i = 0; i < panelJenisKelamin.getComponentCount(); i++) {
                java.awt.Component comp = panelJenisKelamin.getComponent(i);
                if (comp instanceof javax.swing.JRadioButton) {
                    javax.swing.JRadioButton rb = (javax.swing.JRadioButton) comp;
                    rb.setSelected(rb.getText().equalsIgnoreCase(jeniskelamin_id));
                }
            }

            txtAlamat.setText(alamat);
            txtNoTelp.setText(no_telp);

            // Cari dan pilih agama pada combo box
            cbAgamaId.setSelectedItem(agama_nm);

            // Cari dan pilih pekerjaan pada combo box
            cbPekerjaanId.setSelectedItem(pekerjaan_nm);

            selectedId = pasien_id; // simpan id untuk proses update

            // Ubah mode tombol
            btnSimpan.setText("Update");
            btnBatalUbah.setVisible(true);

            JOptionPane.showMessageDialog(this,
                    "Data telah dimuat ke form. Silakan ubah data yang diinginkan dan klik tombol 'Update'.",
                    "Mode Edit",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Pilih baris data yang akan diubah terlebih dahulu.",
                    "Peringatan",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUbahActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblPasien.getSelectedRow();

        if (selectedRow >= 0) {
            String id = (String) model.getValueAt(selectedRow, 9);

            int konfirmasi = JOptionPane.showConfirmDialog(this,
                    "Apakah Anda yakin ingin menghapus data dengan ID: " + id + "?",
                    "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);

            if (konfirmasi == JOptionPane.YES_OPTION) {
                try {
                    stmt = koneksi.createStatement();
                    String query = "DELETE FROM dat_pasien WHERE pasien_id = '" + id + "'";
                    int hasil = stmt.executeUpdate(query);

                    if (hasil > 0) {
                        JOptionPane.showMessageDialog(this, "Data berhasil dihapus dari database");
                        tampilkanDataKeTabel(); // Refresh tabel setelah hapus
                        clearForm(); // Clear form after delete
                        btnSimpan.setText("Simpan");
                        btnBatalUbah.setVisible(false);
                        selectedId = null;
                    } else {
                        JOptionPane.showMessageDialog(this, "Data gagal dihapus dari database");
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(this,
                            """
                            Gagal menghapus data!
                            Error: """ + e.getMessage() + "\n"
                            + "SQLState: " + e.getSQLState() + "\n"
                            + "Error Code: " + e.getErrorCode(),
                            "Error Database",
                            JOptionPane.ERROR_MESSAGE);

                    System.err.println("Error saat menghapus data:");
                    System.err.println("Message: " + e.getMessage());
                    e.printStackTrace();
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Terjadi kesalahan: " + e.getMessage());
                }
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Pilih baris yang akan dihapus terlebih dahulu.",
                    "Peringatan",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void btnBatalUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBatalUbahActionPerformed
        // TODO add your handling code here:
        int konfirmasi = JOptionPane.showConfirmDialog(this,
                "Apakah Anda yakin ingin membatalkan proses edit?",
                "Konfirmasi Batal", JOptionPane.YES_NO_OPTION);

        if (konfirmasi == JOptionPane.YES_OPTION) {
            clearForm();
            JOptionPane.showMessageDialog(this,
                    "Proses edit telah dibatalkan.",
                    "Informasi",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnBatalUbahActionPerformed

    private void clearForm() {
        tfPasienNm.setText("");
        tfNIK.setText("");
        tfLahirTgl.setDate(null); // untuk JDateChooser
//        radioJenisKelaminLakiLaki.setSelected(false);
//        radioJenisKelaminPerempuan.setSelected(false);
        txtAlamat.setText("");
        txtNoTelp.setText("");
        cbAgamaId.setSelectedIndex(0); // kembali ke "- Pilih -"
        cbPekerjaanId.setSelectedIndex(0); // kembali ke "- Pilih -"
        btnSimpan.setText("Simpan");
        btnBatalUbah.setVisible(false);
        selectedId = null;
        tblPasien.clearSelection(); // hilangkan seleksi pada tabel
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new TugasUAS().setVisible(true));
    }

    public static Connection connect_db() {
        String username = "root";
        String password = "";
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/tugas_uas", username, password);

            if (conn != null) {
                System.out.println("Koneksi berhasil");
            }
            return conn;
        } catch (Exception e) {
            System.out.println("Koneksi gagal");
        }

        return null;
    }

    private void tampilkanDataKeTabel() {
        // Definisikan kolom tabel
        String[] kolom = {"No RM", "Nama Pasien", "NIK", "Tgl Lahir", "Jenis Kelamin", "Alamat", "No Telpon", "Agama", "Pekerjaan", "ID"};
        model = new DefaultTableModel(null, kolom);
        tblPasien.setModel(model);

        try {
            stmt = koneksi.createStatement();
            String query = "SELECT dp.rm_no, dp.pasien_nm, dp.nik, dp.lahir_tgl, jk.jeniskelamin_nm, dp.alamat, dp.no_telp, "
                    + "ag.agama_nm, pk.pekerjaan_nm, dp.pasien_id "
                    + "FROM dat_pasien dp "
                    + "LEFT JOIN mst_agama ag ON dp.agama_id = ag.agama_id "
                    + "LEFT JOIN mst_pekerjaan pk ON dp.pekerjaan_id = pk.pekerjaan_id "
                    + "LEFT JOIN mst_jenis_kelamin jk ON dp.jeniskelamin_id = jk.jeniskelamin_id";
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                Object[] data = new Object[10];
                data[0] = rs.getString("rm_no");
                data[1] = rs.getString("pasien_nm");
                data[2] = rs.getString("nik");
                data[3] = rs.getString("lahir_tgl");
                data[4] = rs.getString("jeniskelamin_nm");
                data[5] = rs.getString("alamat");
                data[6] = rs.getString("no_telp");
                data[7] = rs.getString("agama_nm");
                data[8] = rs.getString("pekerjaan_nm");
                data[9] = rs.getString("pasien_id");
                model.addRow(data);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Gagal mengambil data pasien!\n" + e.getMessage());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBatalUbah;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JButton btnUbah;
    private javax.swing.ButtonGroup buttonGroupJenisKelamin;
    private javax.swing.JComboBox<String> cbAgamaId;
    private javax.swing.JComboBox<String> cbPekerjaanId;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAgama;
    private javax.swing.JLabel lblAlamat;
    private javax.swing.JLabel lblJenisKelaminId;
    private javax.swing.JLabel lblLahirTgl;
    private javax.swing.JLabel lblNIK;
    private javax.swing.JLabel lblPasienNm;
    private javax.swing.JLabel lblPekerjaan;
    private javax.swing.JPanel panelJenisKelamin;
    private javax.swing.JTable tblPasien;
    private com.toedter.calendar.JDateChooser tfLahirTgl;
    private javax.swing.JTextField tfNIK;
    private javax.swing.JTextField tfPasienNm;
    private javax.swing.JTextArea txtAlamat;
    private javax.swing.JTextField txtNoTelp;
    // End of variables declaration//GEN-END:variables
}
